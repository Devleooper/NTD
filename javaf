Set<Integer> previous = new HashSet<>();
        int minPositive = 1;
        boolean oneFound = false;
        for (int value : arr) {
            if (minPositive <= value) {
                previous.add(value);
                minPositive++;
            }
            if (value == 1) {
                oneFound = true;
            }
        }

        if (!oneFound) {
            return 1;
        } else {
            if (previous.contains(minPositive)) {
                if (previous.contains(minPositive - 1)) {
                    return minPositive + 1;
                } else {
                    return minPositive - 1;
                }
            } else {
                return minPositive;
            }
        }
-------------------------------------------------

String[] strings = S.split("");

        StringBuilder newPattern = new StringBuilder();
        String currentLetter = null;
        int ocurrences = 0;
        for (String s : strings) {
            if (currentLetter == null) {
                currentLetter = s;
            }
            if (s.equals(currentLetter) && ocurrences < 2) {
                newPattern.append(s);
                ocurrences++;
            } else if (!s.equals(currentLetter)) {
                currentLetter = s;
                newPattern.append(s);
                ocurrences = 1;
            }
        }

        return newPattern.toString();
----------------------------------------------------------------

String[] shoes = S.split("");

        int left = 0;
        int right = 0;
        int interval = 0;
        String last = null;
        for (String shoe : shoes) {
            if (last == null) {
                last = shoe;
                if (shoe.equals("L"))
                    left++;
                else
                    right++;
            } else if (shoe.equals(last)) {
                if (last.equals("L"))
                    left++;
                else
                    right++;
            } else {
                if (last.equals("L")) {
                    right++;
                    last = shoe;
                } else {
                    left++;
                    last = shoe;
                }
            }

            if (left == right && (left != 0 && right != 0)) {
                interval++;
                left = 0;
                right = 0;
                last = null;
            }
        }

        return interval;
